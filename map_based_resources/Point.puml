@startuml
title Point
class DataPoint {
    + FinnishSystem : str
    + MeasurableSystem : str
    + coordinate_type : str
    + decimals_in_point : int
    + level : int

    - __init__(latitude, longitude, coordinate_type, level)
    - reduceDecimals(decimal=decimals_in_point)
    - convert_coordinate_systems(inverse=False, destination=FinnishSystem, save_in_point=False, return_point=False)
    - convert_to_correct_coordinate_system(initial_point, correct_coordinate_system=MeasurableSystem)
    - calculate_distance_to_point(other_point)
    - circle_distance(distance)
    - create_neighbouring_point(distance, heading, rounding=decimals_in_point)
}

class LocationInImage {
    + height: float
    + width: float

    - __init__(width, height)
}
class ImagePoint{
    + cropped_images: Dict[Any, Image]
    + data_point_in_image: LocationInImage
    + image_tile : ImageTile
    + layer: MapLayer
    + name: str
    + web_map : MapService
    _ __init__(data_point_in_image, image_tile, web_map, layer)
    _ get_box_around(size, data_point=None)
    _ get_cropped_image(size, square_size=3, lock=None)
    _ get_image_bounding_box(size, square_size, lock=None)
    _ make_image_bigger(data_point_image, new_image_size, floor_square_size, lock=None)
    _ show_image_with_point()

}
class MeasurementPoint {
    + data_point: DataPoint
    + image_points: List[ImagePoint]

    - __init__(data_point)
    - add_image_point(image_point)
    - get_cropped_images(size, lock=None)
    - get_cropped_image_single(size, position=0, lock=None)
    - retrieve_all_images()
}

'!includesub MapResources.puml!ImageTile

MeasurementPoint "1" *-- "*" ImagePoint
MeasurementPoint "1" *-- "1" DataPoint
ImageTile "1" --*"1" ImagePoint
LocationInImage "1" *-- "1" ImagePoint
@enduml
